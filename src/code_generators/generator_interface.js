/**
 * Abstract interface for BitBLT code generators.
 * Different backends (JS, WASM, etc.) should implement this interface.
 */
class CodeGeneratorInterface {
  /**
   * Generates code for a BitBLT operation.
   * 
   * @param {Object} params - Parameters for the BitBLT operation
   * @param {Object} params.dst - Destination bitmap
   * @param {number} params.dstX - X coordinate in destination bitmap
   * @param {number} params.dstY - Y coordinate in destination bitmap
   * @param {number} params.width - Width of the rectangle to transfer
   * @param {number} params.height - Height of the rectangle to transfer
   * @param {Object} params.src - Source bitmap
   * @param {number} params.srcX - X coordinate in source bitmap
   * @param {number} params.srcY - Y coordinate in source bitmap
   * @param {number} params.op - Operation to perform (from BitBltOp enum)
   * @param {boolean} params.aligned - Whether the operation is aligned to 32-bit boundaries
   * @returns {Object} - An object containing the generated code and metadata
   */
  generateCode(params) {
    throw new Error('Method generateCode() must be implemented by subclasses');
  }

  /**
   * Executes the generated code.
   * 
   * @param {Object} generatedCode - The code generated by generateCode()
   * @param {Object} dst - Destination bitmap
   * @param {Object} src - Source bitmap
   * @returns {void}
   */
  executeCode(generatedCode, dst, src) {
    throw new Error('Method executeCode() must be implemented by subclasses');
  }

  /**
   * Gets a unique key for caching the generated code.
   * 
   * @param {Object} params - Parameters for the BitBLT operation
   * @returns {string} - A unique key for the operation
   */
  getCacheKey(params) {
    // Default implementation creates a key based on the operation parameters
    const {
      dstX, dstY, width, height, srcX, srcY, op, aligned
    } = params;
    
    return `${dstX},${dstY},${width},${height},${srcX},${srcY},${op},${aligned}`;
  }
}

module.exports = CodeGeneratorInterface;
